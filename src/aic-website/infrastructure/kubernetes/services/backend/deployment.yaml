apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: backend-services
  labels:
    app: backend-api
    part-of: aic-website
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: backend-api
      annotations:
        kuma.io/mesh: default
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: backend-api
          image: ghcr.io/applied-innovation-corp/aic-website/backend-api:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "8080"
            - name: LOG_LEVEL
              value: "info"
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: backend-db-credentials
                  key: host
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: backend-db-credentials
                  key: port
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: backend-db-credentials
                  key: dbname
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: backend-db-credentials
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backend-db-credentials
                  key: password
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: backend-redis-credentials
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: backend-redis-credentials
                  key: port
            - name: KAFKA_BROKERS
              value: "kafka-headless.messaging:9092"
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /app/config
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: backend-api-config
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - backend-api
                topologyKey: kubernetes.io/hostname
