# Example GitLab CI/CD Pipeline with Template Includes
# This is an example of how to use the template includes

# Define stages
stages:
  - validate
  - security-scan
  - test
  - build
  - package
  - deploy
  - performance
  - compliance

# Include templates
include:
  - local: /infrastructure/cicd/gitlab-ci/templates/security-scan.yml
  - local: /infrastructure/cicd/gitlab-ci/templates/testing.yml
  - local: /infrastructure/cicd/gitlab-ci/templates/deployment.yml

# Default settings
default:
  interruptible: true
  tags:
    - kubernetes

# Variables
variables:
  # Docker settings
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Kubernetes settings
  KUBECONFIG: /etc/deploy/config
  # Node settings
  NODE_ENV: production

# Workflow rules
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ /^release\/.*$/
    - if: $CI_COMMIT_TAG

# Node.js setup
.node-setup: &node-setup
  image: node:18-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline

# Docker setup
.docker-setup: &docker-setup
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

# Validation Stage
lint:
  stage: validate
  <<: *node-setup
  script:
    - npm run lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

validate-gitlab-ci:
  stage: validate
  image: registry.gitlab.com/gitlab-org/gitlab-runner-helper:latest
  script:
    - gitlab-ci-lint .gitlab-ci.yml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - changes:
        - .gitlab-ci.yml

# Build Stage
build-frontend:
  stage: build
  <<: *node-setup
  script:
    - cd src/aic-website/apps/frontend
    - npm run build
  artifacts:
    paths:
      - src/aic-website/apps/frontend/.next/
      - src/aic-website/apps/frontend/public/
    expire_in: 1 week
  rules:
    - changes:
        - src/aic-website/apps/frontend/**/*
      when: always

build-backend:
  stage: build
  <<: *node-setup
  script:
    - cd src/aic-website/apps/backend
    - npm run build
  artifacts:
    paths:
      - src/aic-website/apps/backend/dist/
    expire_in: 1 week
  rules:
    - changes:
        - src/aic-website/apps/backend/**/*
      when: always

# Package Stage
package-frontend:
  stage: package
  <<: *docker-setup
  needs:
    - build-frontend
  script:
    - cd src/aic-website/apps/frontend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE/frontend:latest .
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - src/aic-website/apps/frontend/**/*
    - if: $CI_COMMIT_TAG

package-backend:
  stage: package
  <<: *docker-setup
  needs:
    - build-backend
  script:
    - cd src/aic-website/apps/backend
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE/backend:latest .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/backend:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - src/aic-website/apps/backend/**/*
    - if: $CI_COMMIT_TAG

# Compliance Stage
compliance-check:
  stage: compliance
  image: registry.gitlab.com/gitlab-org/security-products/license-scanning:latest
  script:
    - /run.sh analyze .
  artifacts:
    reports:
      license_scanning: gl-license-scanning-report.json
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# The rest of the jobs are included from the templates
