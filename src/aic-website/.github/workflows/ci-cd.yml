name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HARBOR_REGISTRY: ${{ secrets.HARBOR_REGISTRY_URL }}
  HARBOR_PROJECT: ${{ secrets.HARBOR_PROJECT }}

jobs:
  # Code quality and validation
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install flake8 black isort mypy

      - name: Run code quality checks
        run: |
          echo "Running code quality checks..."
          find services -name "*.py" -exec flake8 {} \;
          find services -name "*.py" -exec black --check {} \;
          find services -name "*.py" -exec isort --check-only {} \;

      - name: Validate Docker Compose
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.override.yml config

  # Test jobs
  test-auth-service:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_auth_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/auth-service
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx pytest-cov

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auth_db
          REDIS_URL: redis://localhost:6379
        run: |
          cd services/auth-service
          pytest tests/ -v --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: services/auth-service/coverage.xml
          flags: auth-service

  test-user-service:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_user_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/user-service
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx pytest-cov

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_user_db
          REDIS_URL: redis://localhost:6379
        run: |
          cd services/user-service
          pytest tests/ -v --cov=. --cov-report=xml

  test-content-service:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_content_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/content-service
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx pytest-cov moto

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_content_db
          REDIS_URL: redis://localhost:6379
        run: |
          cd services/content-service
          pytest tests/ -v --cov=. --cov-report=xml

  test-notification-service:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_notification_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/notification-service
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx pytest-cov moto

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_notification_db
          REDIS_URL: redis://localhost:6379
        run: |
          cd services/notification-service
          pytest tests/ -v --cov=. --cov-report=xml

  # Build and push Docker images
  build-auth-service:
    needs: [validate, test-auth-service]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/auth-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-user-service:
    needs: [validate, test-user-service]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/user-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-content-service:
    needs: [validate, test-content-service]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/content-service

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/content-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-notification-service:
    needs: [validate, test-notification-service]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/notification-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-web-main:
    needs: [validate]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web-main/package-lock.json

      - name: Install dependencies
        run: |
          cd apps/web-main
          npm ci

      - name: Build application
        run: |
          cd apps/web-main
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-main

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/web-main
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security-scan:
    needs: [build-auth-service, build-user-service, build-content-service, build-notification-service]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [auth-service, user-service, content-service, notification-service]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:main
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to development
  deploy-dev:
    needs: [build-auth-service, build-user-service, build-content-service, build-notification-service, build-web-main]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.aic-website.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.DEV_KUBECONFIG }}

      - name: Deploy to development
        run: |
          kubectl set image deployment/auth-service auth-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:develop -n aic-website-dev
          kubectl set image deployment/user-service user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:develop -n aic-website-dev
          kubectl set image deployment/content-service content-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/content-service:develop -n aic-website-dev
          kubectl set image deployment/notification-service notification-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:develop -n aic-website-dev
          kubectl set image deployment/web-main web-main=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-main:develop -n aic-website-dev

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/auth-service -n aic-website-dev --timeout=300s
          kubectl rollout status deployment/user-service -n aic-website-dev --timeout=300s
          kubectl rollout status deployment/content-service -n aic-website-dev --timeout=300s
          kubectl rollout status deployment/notification-service -n aic-website-dev --timeout=300s
          kubectl rollout status deployment/web-main -n aic-website-dev --timeout=300s

  # Deploy to staging
  deploy-staging:
    needs: [security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.aic-website.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

      - name: Deploy to staging
        run: |
          kubectl set image deployment/auth-service auth-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:main -n aic-website-staging
          kubectl set image deployment/user-service user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:main -n aic-website-staging
          kubectl set image deployment/content-service content-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/content-service:main -n aic-website-staging
          kubectl set image deployment/notification-service notification-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:main -n aic-website-staging
          kubectl set image deployment/web-main web-main=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-main:main -n aic-website-staging

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/auth-service -n aic-website-staging --timeout=300s
          kubectl rollout status deployment/user-service -n aic-website-staging --timeout=300s
          kubectl rollout status deployment/content-service -n aic-website-staging --timeout=300s
          kubectl rollout status deployment/notification-service -n aic-website-staging --timeout=300s
          kubectl rollout status deployment/web-main -n aic-website-staging --timeout=300s

  # Deploy to production
  deploy-prod:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://aic-website.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PROD_KUBECONFIG }}

      - name: Deploy to production
        run: |
          kubectl set image deployment/auth-service auth-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:main -n aic-website-prod
          kubectl set image deployment/user-service user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:main -n aic-website-prod
          kubectl set image deployment/content-service content-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/content-service:main -n aic-website-prod
          kubectl set image deployment/notification-service notification-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:main -n aic-website-prod
          kubectl set image deployment/web-main web-main=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-main:main -n aic-website-prod

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/auth-service -n aic-website-prod --timeout=300s
          kubectl rollout status deployment/user-service -n aic-website-prod --timeout=300s
          kubectl rollout status deployment/content-service -n aic-website-prod --timeout=300s
          kubectl rollout status deployment/notification-service -n aic-website-prod --timeout=300s
          kubectl rollout status deployment/web-main -n aic-website-prod --timeout=300s

  # Notifications
  notify-success:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Production deployment successful for AIC Website'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Pipeline failed for AIC Website'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
