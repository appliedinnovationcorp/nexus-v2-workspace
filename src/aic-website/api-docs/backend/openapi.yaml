openapi: 3.0.3
info:
  title: AIC Website Backend API
  description: |
    API documentation for the AIC Website Backend Services.
    
    This API provides access to core backend functionality including user management,
    content management, and application settings.
  version: 1.0.0
  contact:
    name: AIC Development Team
    email: dev@example.com
    url: https://developer.example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.example.com/v1
    description: Production API Server
  - url: https://staging-api.example.com/v1
    description: Staging API Server
  - url: https://dev-api.example.com/v1
    description: Development API Server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Content
    description: Content management operations
  - name: Settings
    description: Application settings operations
  - name: Health
    description: Health check endpoints

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health/ready:
    get:
      summary: Readiness check endpoint
      description: Returns the readiness status of the API
      operationId: getReadiness
      tags:
        - Health
      responses:
        '200':
          description: API is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: API is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token
      operationId: login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh token
      description: Refreshes an existing JWT token
      operationId: refreshToken
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: User logout
      description: Invalidates the current JWT token
      operationId: logout
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: Get all users
      description: Returns a list of users
      operationId: getUsers
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - name: role
          in: query
          description: Filter users by role
          required: false
          schema:
            type: string
            enum: [admin, editor, user]
        - name: status
          in: query
          description: Filter users by status
          required: false
          schema:
            type: string
            enum: [active, inactive, pending]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new user
      description: Creates a new user
      operationId: createUser
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Returns a user by ID
      operationId: getUserById
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user
      description: Updates an existing user
      operationId: updateUser
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user
      description: Deletes an existing user
      operationId: deleteUser
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /content:
    get:
      summary: Get all content
      description: Returns a list of content items
      operationId: getContent
      tags:
        - Content
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - name: type
          in: query
          description: Filter content by type
          required: false
          schema:
            type: string
            enum: [article, page, product]
        - name: status
          in: query
          description: Filter content by status
          required: false
          schema:
            type: string
            enum: [draft, published, archived]
      responses:
        '200':
          description: List of content items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create content
      description: Creates a new content item
      operationId: createContent
      tags:
        - Content
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentRequest'
      responses:
        '201':
          description: Content created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /content/{contentId}:
    get:
      summary: Get content by ID
      description: Returns a content item by ID
      operationId: getContentById
      tags:
        - Content
      security:
        - BearerAuth: []
      parameters:
        - name: contentId
          in: path
          description: Content ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Content found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update content
      description: Updates an existing content item
      operationId: updateContent
      tags:
        - Content
      security:
        - BearerAuth: []
      parameters:
        - name: contentId
          in: path
          description: Content ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentRequest'
      responses:
        '200':
          description: Content updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete content
      description: Deletes an existing content item
      operationId: deleteContent
      tags:
        - Content
      security:
        - BearerAuth: []
      parameters:
        - name: contentId
          in: path
          description: Content ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Content deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /settings:
    get:
      summary: Get all settings
      description: Returns a list of application settings
      operationId: getSettings
      tags:
        - Settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update settings
      description: Updates application settings
      operationId: updateSettings
      tags:
        - Settings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettingsRequest'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    
    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    
    SortParam:
      name: sort
      in: query
      description: Sort field and direction (e.g., name:asc, createdAt:desc)
      required: false
      schema:
        type: string

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        version:
          type: string
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          additionalProperties:
            type: object
      required:
        - status
        - version
        - timestamp

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        statusCode:
          type: integer
        timestamp:
          type: string
          format: date-time
        path:
          type: string
      required:
        - error
        - message
        - statusCode
        - timestamp

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - success

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        tokenType:
          type: string
          default: Bearer
        user:
          $ref: '#/components/schemas/User'
      required:
        - accessToken
        - refreshToken
        - expiresIn
        - tokenType
        - user

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, editor, user]
        status:
          type: string
          enum: [active, inactive, pending]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - firstName
        - lastName
        - role
        - status
        - createdAt
        - updatedAt

    UserListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination

    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
      required:
        - data

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, editor, user]
      required:
        - email
        - password
        - firstName
        - lastName
        - role

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [admin, editor, user]
        status:
          type: string
          enum: [active, inactive, pending]
        password:
          type: string
          format: password
          minLength: 8

    Content:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        slug:
          type: string
        type:
          type: string
          enum: [article, page, product]
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
        metadata:
          type: object
          additionalProperties: true
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        publishedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - slug
        - type
        - status
        - content
        - author
        - createdAt
        - updatedAt

    ContentListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Content'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination

    ContentResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Content'
      required:
        - data

    CreateContentRequest:
      type: object
      properties:
        title:
          type: string
        slug:
          type: string
        type:
          type: string
          enum: [article, page, product]
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
        metadata:
          type: object
          additionalProperties: true
      required:
        - title
        - type
        - content

    UpdateContentRequest:
      type: object
      properties:
        title:
          type: string
        slug:
          type: string
        status:
          type: string
          enum: [draft, published, archived]
        content:
          type: string
        metadata:
          type: object
          additionalProperties: true

    Settings:
      type: object
      properties:
        siteTitle:
          type: string
        siteDescription:
          type: string
        logo:
          type: string
          format: uri
        favicon:
          type: string
          format: uri
        primaryColor:
          type: string
        secondaryColor:
          type: string
        socialLinks:
          type: object
          properties:
            facebook:
              type: string
              format: uri
            twitter:
              type: string
              format: uri
            linkedin:
              type: string
              format: uri
            instagram:
              type: string
              format: uri
        contactEmail:
          type: string
          format: email
        contactPhone:
          type: string
        address:
          type: string
        googleAnalyticsId:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
        - siteTitle
        - updatedAt

    SettingsResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Settings'
      required:
        - data

    UpdateSettingsRequest:
      type: object
      properties:
        siteTitle:
          type: string
        siteDescription:
          type: string
        logo:
          type: string
          format: uri
        favicon:
          type: string
          format: uri
        primaryColor:
          type: string
        secondaryColor:
          type: string
        socialLinks:
          type: object
          properties:
            facebook:
              type: string
              format: uri
            twitter:
              type: string
              format: uri
            linkedin:
              type: string
              format: uri
            instagram:
              type: string
              format: uri
        contactEmail:
          type: string
          format: email
        contactPhone:
          type: string
        address:
          type: string
        googleAnalyticsId:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        totalItems:
          type: integer
        totalPages:
          type: integer
      required:
        - page
        - limit
        - totalItems
        - totalPages
