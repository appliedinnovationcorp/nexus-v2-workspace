version: '3.8'

services:
  # Analytics Engine API
  analytics-engine:
    build: .
    ports:
      - "3001:3001"
      - "9090:9090"  # Prometheus metrics
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/analytics
      - REDIS_HOST=redis
      - INFLUXDB_URL=http://influxdb:8086
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - mongodb
      - redis
      - influxdb
      - kafka
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - analytics-network

  # MongoDB for storing events, dashboards, users
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=analytics
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - analytics-network

  # Redis for caching and real-time data
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - analytics-network

  # InfluxDB for time-series metrics
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=analytics
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=password
      - INFLUXDB_USER=analytics
      - INFLUXDB_USER_PASSWORD=analytics
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - analytics-network

  # Apache Kafka for event streaming (optional)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - analytics-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - analytics-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - analytics-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - analytics-network

  # Nginx for load balancing and SSL termination
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - analytics-engine
      - grafana
    networks:
      - analytics-network

volumes:
  mongodb_data:
  redis_data:
  influxdb_data:
  kafka_data:
  grafana_data:
  prometheus_data:

networks:
  analytics-network:
    driver: bridge
