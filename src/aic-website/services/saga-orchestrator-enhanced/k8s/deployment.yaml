apiVersion: apps/v1
kind: Deployment
metadata:
  name: saga-orchestrator
  namespace: saga-system
  labels:
    app: saga-orchestrator
    version: v2.0.0
    component: orchestrator
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: saga-orchestrator
  template:
    metadata:
      labels:
        app: saga-orchestrator
        version: v2.0.0
        component: orchestrator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: saga-orchestrator
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: saga-orchestrator
        image: saga-orchestrator:2.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 8080
          protocol: TCP
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CLUSTER_ENABLED
          value: "true"
        - name: CLUSTER_NODES
          value: "saga-orchestrator-0.saga-orchestrator-headless:8080,saga-orchestrator-1.saga-orchestrator-headless:8080,saga-orchestrator-2.saga-orchestrator-headless:8080"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: saga-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: saga-secrets
              key: redis-url
        - name: EVENT_STORE_URL
          valueFrom:
            secretKeyRef:
              name: saga-secrets
              key: event-store-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: saga-secrets
              key: jwt-secret
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_ENABLED
          value: "true"
        - name: TRACING_ENABLED
          value: "true"
        - name: AUTH_ENABLED
          value: "true"
        - name: RATE_LIMIT_ENABLED
          value: "true"
        - name: MAX_CONCURRENT_SAGAS
          value: "1000"
        - name: WORKER_THREADS
          value: "10"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: saga-orchestrator-config
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - saga-orchestrator
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "saga-orchestrator"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: saga-orchestrator
  namespace: saga-system
  labels:
    app: saga-orchestrator
    component: orchestrator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  selector:
    app: saga-orchestrator

---
apiVersion: v1
kind: Service
metadata:
  name: saga-orchestrator-headless
  namespace: saga-system
  labels:
    app: saga-orchestrator
    component: orchestrator
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  selector:
    app: saga-orchestrator

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: saga-orchestrator
  namespace: saga-system
  labels:
    app: saga-orchestrator

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: saga-orchestrator
  labels:
    app: saga-orchestrator
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: saga-orchestrator
  labels:
    app: saga-orchestrator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: saga-orchestrator
subjects:
- kind: ServiceAccount
  name: saga-orchestrator
  namespace: saga-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: saga-orchestrator-config
  namespace: saga-system
  labels:
    app: saga-orchestrator
data:
  config.yaml: |
    orchestrator:
      cluster:
        enabled: true
        election_timeout: 5000
        heartbeat_interval: 1000
      
      execution:
        max_concurrent_sagas: 1000
        default_timeout: 300000
        max_retries: 3
        retry_delay: 1000
        compensation_timeout: 60000
      
      monitoring:
        metrics_enabled: true
        tracing_enabled: true
        health_check_interval: 30
      
      security:
        auth_enabled: true
        rbac_enabled: true
        rate_limit_enabled: true
        rate_limit_requests: 1000
        rate_limit_window: 60
      
      storage:
        event_retention_days: 90
        saga_retention_days: 30
        batch_size: 100
      
      features:
        saga_versioning_enabled: true
        parallel_execution_enabled: true
        dynamic_routing_enabled: true
        saga_composition_enabled: true

---
apiVersion: v1
kind: Secret
metadata:
  name: saga-secrets
  namespace: saga-system
  labels:
    app: saga-orchestrator
type: Opaque
stringData:
  database-url: "postgresql://saga:saga123@postgres:5432/saga_orchestrator"
  redis-url: "redis://redis:6379/0"
  event-store-url: "postgresql://saga:saga123@postgres:5432/saga_events"
  jwt-secret: "your-super-secret-jwt-key-change-this-in-production"

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: saga-orchestrator
  namespace: saga-system
  labels:
    app: saga-orchestrator
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - saga-orchestrator.yourdomain.com
    secretName: saga-orchestrator-tls
  rules:
  - host: saga-orchestrator.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: saga-orchestrator
            port:
              number: 80

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: saga-orchestrator
  namespace: saga-system
  labels:
    app: saga-orchestrator
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: saga-orchestrator

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: saga-orchestrator
  namespace: saga-system
  labels:
    app: saga-orchestrator
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: saga-orchestrator
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: saga_instances_active
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
