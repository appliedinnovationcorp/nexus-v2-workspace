# AIC Website - Docker Compose Configuration
# Development and local testing environment

version: '3.8'

services:
  # Main Corporate Website
  web-main:
    build:
      context: .
      dockerfile: apps/web-main/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://aicadmin:password@postgres:5432/aicwebsite
      - MONGODB_URL=mongodb://aicadmin:password@mongodb:27017/aicwebsite
      - MEILISEARCH_HOST=http://meilisearch:7700
      - MEILISEARCH_API_KEY=masterKey
      - NEXTAUTH_SECRET=your-secret-key
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      - postgres
      - mongodb
      - meilisearch
      - redis
    volumes:
      - ./apps/web-main:/app
      - /app/node_modules
    networks:
      - aic-network

  # Authentication Service
  auth-service:
    build:
      context: services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://aicadmin:password@postgres:5432/auth_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=auth-service
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - aic-network

  # User Service
  user-service:
    build:
      context: services/user-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://aicadmin:password@postgres:5432/user_db
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8000
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=user-service
    depends_on:
      - postgres
      - redis
      - auth-service
      - jaeger
    networks:
      - aic-network

  # Content Service
  content-service:
    build:
      context: services/content-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://aicadmin:password@postgres:5432/content_db
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=your-aws-access-key
      - AWS_SECRET_ACCESS_KEY=your-aws-secret-key
      - AWS_REGION=us-east-1
      - S3_BUCKET_NAME=aic-website-media
      - AUTH_SERVICE_URL=http://auth-service:8000
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=content-service
    depends_on:
      - postgres
      - redis
      - auth-service
      - jaeger
    networks:
      - aic-network

  # Notification Service
  notification-service:
    build:
      context: services/notification-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://aicadmin:password@postgres:5432/notification_db
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=your-email@gmail.com
      - SMTP_PASSWORD=your-app-password
      - FROM_EMAIL=noreply@aic-website.com
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=notification-service
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - aic-network

  # AI Engine Service
  ai-engine:
    build:
      context: services/ai-engine
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://aicadmin:password@postgres:5432/ai_engine_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=your-openai-api-key
      - ANTHROPIC_API_KEY=your-anthropic-api-key
      - AWS_REGION=us-east-1
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=ai-engine
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - aic-network

  # Event Store Service
  event-store:
    build:
      context: services/event-store
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://aicadmin:password@postgres:5432/event_store_db
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=event-store
    depends_on:
      - postgres
      - redis
      - kafka
      - jaeger
    networks:
      - aic-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=aicwebsite
      - POSTGRES_USER=aicadmin
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=auth_db,user_db,content_db,notification_db,ai_engine_db,event_store_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - aic-network

  # MongoDB
  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=aicadmin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=aicwebsite
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - aic-network

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - aic-network

  # MeiliSearch
  meilisearch:
    image: getmeili/meilisearch:v1.5
    environment:
      - MEILI_MASTER_KEY=masterKey
      - MEILI_ENV=development
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - aic-network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - aic-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - aic-network

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - aic-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - aic-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - aic-network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  meilisearch_data:
  grafana_data:

networks:
  aic-network:
    driver: bridge
